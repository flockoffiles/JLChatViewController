// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIImage;
@class UIColor;
@class NSIndexPath;
@class UIFont;

SWIFT_CLASS("_TtC20JLChatViewController16JLChatAppearence")
@interface JLChatAppearence : NSObject
+ (UIImage * __nullable)incomingBubbleImage;
+ (void)setIncomingBubbleImage:(UIImage * __nullable)value;
+ (UIImage * __nullable)incomingBubbleImageMask;
+ (void)setIncomingBubbleImageMask:(UIImage * __nullable)value;
+ (UIColor * __nonnull)incomingBubbleColor;
+ (void)setIncomingBubbleColor:(UIColor * __nonnull)value;
+ (BOOL)showIncomingSenderImage;
+ (void)setShowIncomingSenderImage:(BOOL)value;
+ (UIColor * __nonnull)incomingTextColor;
+ (void)setIncomingTextColor:(UIColor * __nonnull)value;
+ (UIImage * __nullable)outgoingBubbleImage;
+ (void)setOutgoingBubbleImage:(UIImage * __nullable)value;
+ (UIImage * __nullable)outgoingBubbleImageMask;
+ (void)setOutgoingBubbleImageMask:(UIImage * __nullable)value;
+ (UIColor * __nonnull)outgoingBubbleColor;
+ (void)setOutgoingBubbleColor:(UIColor * __nonnull)value;
+ (BOOL)showOutgoingSenderImage;
+ (void)setShowOutgoingSenderImage:(BOOL)value;
+ (UIColor * __nonnull)outGoingTextColor;
+ (void)setOutGoingTextColor:(UIColor * __nonnull)value;
+ (CGSize)senderImageSize;
+ (void)setSenderImageSize:(CGSize)value;
+ (CGFloat)senderImageCornerRadius;
+ (void)setSenderImageCornerRadius:(CGFloat)value;
+ (UIColor * __nonnull)senderImageBackgroundColor;
+ (void)setSenderImageBackgroundColor:(UIColor * __nonnull)value;
+ (BOOL (^ __nonnull)(NSIndexPath * __nonnull))shouldShowMessageDateAtIndexPath;
+ (void)setShouldShowMessageDateAtIndexPath:(BOOL (^ __nonnull)(NSIndexPath * __nonnull))value;
+ (UIFont * __nonnull)chatFont;
+ (void)setChatFont:(UIFont * __nonnull)value;
+ (void)configChatFont:(UIFont * __nullable)font shouldShowMessageDateAtIndexPath:(BOOL (^ __nullable)(NSIndexPath * __nonnull))shouldShowMessageDateAtIndexPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIActivityIndicatorView;
@class NSCoder;

SWIFT_CLASS("_TtC20JLChatViewController15JLChatImageView")
@interface JLChatImageView : UIImageView
@property (nonatomic) BOOL useBubbleForm;
@property (nonatomic, strong) UIImage * __nullable image;
@property (nonatomic, strong) UIActivityIndicatorView * __null_unspecified loadActivity;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)addImage:(UIImage * __nonnull)image mask:(UIImage * __nullable)mask;
@end

@class JLMessage;

SWIFT_CLASS("_TtC20JLChatViewController17JLChatMessageCell")
@interface JLChatMessageCell : UITableViewCell

/// This variable indicates if this cell is being reused.
///
/// If value is true so you don't have to configure it again as outgoing or incoming message.
///
/// If value is false so you have to configure it again as outgoing or incoming message.
@property (nonatomic) BOOL cellAlreadyUsed;
@property (nonatomic, readonly) BOOL isMenuConfigured;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canPerformAction:(SEL __null_unspecified)action withSender:(id __nullable)sender;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;

/// The implementation of this method have to contain every code that is necessary to initialize the message cell.
///
/// You must override this method.
- (void)initCell:(JLMessage * __nonnull)message thisIsNewMessage:(BOOL)thisIsNewMessage showDate:(BOOL)showDate isOutgoingMessage:(BOOL)isOutgoingMessage;

/// The implementation of this method have to contain every code that is necessary to update the message cell status accordingly to the message related to this cell.
///
/// You must override this method.
///
/// \param message The 'JLMessage' instance related to its cell with its 'messageStatus' updated.
- (void)updateMessageStatus:(JLMessage * __nonnull)message;

/// Present the 'errorButton'.
///
/// You must override this method.
- (void)showErrorButton:(BOOL)animated;

/// Hide the 'errorButton'.
///
/// You must override this method.
- (void)hideErrorButton:(BOOL)animated;

/// Use this method to configure the menu items of this cell 'UIMenuController'
///
/// \param deleteTitle the title of the menu item that indicates the delete action.
///
/// \param senTitle the title of menu item that indicates the try to send again action.
///
/// \param deleteBlock action that is executed when delete menu item is clicked.
///
/// \param sendBlock action that is executed when send menu item is clicked.
- (void)configMenu:(NSString * __nullable)deleteTitle sendTitle:(NSString * __nullable)sendTitle deleteBlock:(void (^ __nonnull)(void))deleteBlock sendBlock:(void (^ __nonnull)(void))sendBlock;
- (void)deleteAction:(id __nonnull)sender;
- (void)sendAction:(id __nonnull)sender;

/// The implementation of this method have to contain every code that is necessary to configure the message cell as a outgoing message.
///
/// You must override this method.
- (void)configAsOutgoingMessage;

/// The implementation of this method have to contain every code that is necessary to configure the message cell as a incoming message.
///
/// You must override this method.
- (void)configAsIncomingMessage;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * __nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class UIScrollView;

SWIFT_CLASS("_TtC20JLChatViewController15JLChatTableView")
@interface JLChatTableView : UITableView <UITableViewDelegate, UIScrollViewDelegate>

/// The id of the current user
@property (nonatomic, copy) NSString * __null_unspecified myID;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didChangeValueForKey:(NSString * __nonnull)key;

/// Use it to add messages that you sent and that you received.
///
/// Never use it to add old messages inside chat tableView.
- (void)addNewMessage;

/// Use it to add old messages inside chat tableView.
///
/// \param quant the number of messages that will be added.
- (void)addOldMessages:(NSInteger)quant;

/// Use this method when some kind of error when trying to load old messages happend and you just want to stop the animation
- (void)forceToFinishLoadingAnimation;

/// Use this method to remove from 'ChatTableView' the message at indexPath
///
/// \param indexPath the indexPath of the message that you want to remove from 'ChatTableView'.
- (void)removeMessage:(NSIndexPath * __nonnull)indexPath;

/// Use this method when you want to update the message cell of 'ChatTableView' status
///
/// \param indexPath the indexPath of the cell that you want to update the status.
///
/// \param message The message that corresponds to the cell at indexPath 'indexPath'
/// with its status already updated.
- (void)updateMessageStatusOfCellAtIndexPath:(NSIndexPath * __nonnull)indexPath message:(JLMessage * __nonnull)message;
- (CGFloat)tableView:(UITableView * __nonnull)tableView heightForFooterInSection:(NSInteger)section;
- (UIView * __nullable)tableView:(UITableView * __nonnull)tableView viewForHeaderInSection:(NSInteger)section;
- (void)scrollViewDidScroll:(UIScrollView * __nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * __nonnull)scrollView;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * __nonnull)scrollView;
- (void)tableView:(UITableView * __nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;

/// Call this method to make all basic configuration and creation of your message cell
///
/// \param indexPath The indexPath of the cell on chat tableView.
///
/// \param message The message related to the messageCell that will be created.
///
/// \returns  The created message cell.
- (JLChatMessageCell * __nonnull)chatMessageForRowAtIndexPath:(NSIndexPath * __nonnull)indexPath message:(JLMessage * __nonnull)message;
- (void)haveToUpdateInsetsBottom:(CGFloat)bottom scrollToBottom:(BOOL)scrollToBottom;
@end


SWIFT_CLASS("_TtC20JLChatViewController14JLChatTextView")
@interface JLChatTextView : UITextView
@property (nonatomic, copy) NSString * __null_unspecified text;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class JLCustomTextView;
@class UIButton;

SWIFT_CLASS("_TtC20JLChatViewController13JLChatToolBar")
@interface JLChatToolBar : UIToolbar <UIScrollViewDelegate, UITextViewDelegate>
@property (nonatomic) CGRect frame;

/// The instance of the textView where you write your message and add an indicator of file
@property (nonatomic, readonly, strong) JLCustomTextView * __null_unspecified inputText;
@property (nonatomic, readonly, strong) UIButton * __null_unspecified rightButton;
@property (nonatomic, readonly, strong) UIButton * __null_unspecified leftButton;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;

/// Use this method for you configure the textView of your chat
///
/// \param font The font of the 'JLCustomTextView'
///
/// \param textColor The color of the text of the 'JLCustomTextView'
///
/// \param placeHolder The text that will be shown when there is nothing on 'JLCustomTextView'
- (void)configToolInputText:(UIFont * __nonnull)font textColor:(UIColor * __nullable)textColor placeHolder:(NSString * __nullable)placeHolder;

/// Use this method for you set left button title and or image
///
/// \param title title of the button
///
/// \param image the image of the button
- (void)configLeftButton:(NSString * __nullable)title image:(UIImage * __nullable)image;

/// Use this method for you set right button title and or image
///
/// \param title title of the button
///
/// \param image the image of the button
- (void)configRightButton:(NSString * __nullable)title image:(UIImage * __nullable)image;
- (void)textViewDidBeginEditing:(UITextView * __nonnull)textView;
- (void)textViewDidChange:(UITextView * __nonnull)textView;
- (BOOL)textView:(UITextView * __nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * __nonnull)text;

/// Use this method for you know if there is some file added to be sent
///
/// \returns  True if there is a file added and False if there is not.
- (BOOL)thereIsSomeFileAdded;
@end

@class NSLayoutConstraint;
@class NSBundle;


/// This is the class that contains all basic methods and outlets that you need to work with JLChatVC file from JLChat.storyboard
SWIFT_CLASS("_TtC20JLChatViewController20JLChatViewController")
@interface JLChatViewController : UIViewController

/// This is your tableView with all changes that you need to work with it as chat.
@property (nonatomic, weak) IBOutlet JLChatTableView * __null_unspecified chatTableView;

/// use this to access the UI elements that you need to write and send your message.
@property (nonatomic, weak) IBOutlet JLChatToolBar * __null_unspecified toolBar;

/// Do not change this value if you do not know exactly what you are doing!
///
/// Its used to control the toolBar position accordingly to changes on UI.
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * __null_unspecified toolBarDistToBottom;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class JLFile;

SWIFT_CLASS("_TtC20JLChatViewController16JLCustomTextView")
@interface JLCustomTextView : UITextView
@property (nonatomic, copy) NSString * __null_unspecified text;
@property (nonatomic, strong) UIFont * __nullable font;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Use this method for you know if there is some text
///
/// \returns  true if there is some text and false if there is not text
- (BOOL)thereIsSomeText;
- (void)paste:(id __nullable)sender;

/// Add a indicator of file added with 'JLFile' informations
///
/// \param file The 'JLFile' containing the informations
- (void)addFile:(JLFile * __nonnull)file;

/// Remove the indicator of file added
- (void)removeFile;
@end


SWIFT_CLASS("_TtC20JLChatViewController6JLFile")
@interface JLFile : NSObject
- (nonnull instancetype)initWithTitle:(NSString * __nullable)title image:(UIImage * __nullable)image OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC20JLChatViewController19JLFileIndicatorView")
@interface JLFileIndicatorView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class UILabel;

SWIFT_CLASS("_TtC20JLChatViewController18JLImageMessageCell")
@interface JLImageMessageCell : JLChatMessageCell

/// Image that is related with the message
@property (nonatomic, weak) IBOutlet JLChatImageView * __null_unspecified messageImageView;

/// Image of the one that sent the message
@property (nonatomic, weak) IBOutlet UIImageView * __null_unspecified senderImageView;
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified messageDateLabel;
- (void)awakeFromNib;
- (void)prepareForReuse;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)initCell:(JLMessage * __nonnull)message thisIsNewMessage:(BOOL)thisIsNewMessage showDate:(BOOL)showDate isOutgoingMessage:(BOOL)isOutgoingMessage;

/// Use this method to add the image into 'messageImageView'
- (void)addImage:(UIImage * __nonnull)image;

/// If the related image is not loaded and you are downloading it you can call this method for the user see that its been loaded, but by default if the 'JLMessage' parameter of method 'initCell' have its image  equal to nil this method is called.
- (void)achiveLoadingMode;
- (void)updateMessageStatus:(JLMessage * __nonnull)message;
- (void)showErrorButton:(BOOL)animated;
- (void)hideErrorButton:(BOOL)animated;
- (void)configMenu:(NSString * __nullable)deleteTitle sendTitle:(NSString * __nullable)sendTitle deleteBlock:(void (^ __nonnull)(void))deleteBlock sendBlock:(void (^ __nonnull)(void))sendBlock;
- (void)configAsIncomingMessage;
- (void)configAsOutgoingMessage;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * __nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

SWIFT_CLASS("_TtC20JLChatViewController9JLMessage")
@interface JLMessage : NSObject

/// The id of the one that sent the message.
@property (nonatomic, copy) NSString * __null_unspecified senderID;

/// The image of the one that sent the message.
@property (nonatomic, strong) UIImage * __nullable senderImage;

/// The text of the message.
@property (nonatomic, copy) NSString * __nullable text;

/// The image of the message.
@property (nonatomic, strong) UIImage * __nullable relatedImage;

/// The date that the message were sent.
@property (nonatomic, strong) NSDate * __null_unspecified messageDate;

/// This is the initializer for the messages of messageKind = MessageKind.Text
- (nonnull instancetype)initWithText:(NSString * __nonnull)text senderID:(NSString * __nonnull)senderID messageDate:(NSDate * __nonnull)messageDate senderImage:(UIImage * __nullable)senderImage OBJC_DESIGNATED_INITIALIZER;

/// This is the initializer for the messages of messageKind = MessageKind.Image
- (nonnull instancetype)initWithSenderID:(NSString * __nonnull)senderID messageDate:(NSDate * __nonnull)messageDate senderImage:(UIImage * __nullable)senderImage relatedImage:(UIImage * __nullable)relatedImage OBJC_DESIGNATED_INITIALIZER;

/// this method gives you the formatted string to be shown on the top of the messageCell, almost never you will need to call this method.
- (NSString * __nonnull)generateStringFromDate;
@end


SWIFT_CLASS("_TtC20JLChatViewController17JLTextMessageCell")
@interface JLTextMessageCell : JLChatMessageCell
@property (nonatomic, weak) IBOutlet UILabel * __null_unspecified messageDateLabel;
@property (nonatomic, weak) IBOutlet JLChatTextView * __null_unspecified chatTextView;
@property (nonatomic, weak) IBOutlet UIImageView * __null_unspecified senderImageView;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)prepareForReuse;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)initCell:(JLMessage * __nonnull)message thisIsNewMessage:(BOOL)thisIsNewMessage showDate:(BOOL)showDate isOutgoingMessage:(BOOL)isOutgoingMessage;
- (void)updateMessageStatus:(JLMessage * __nonnull)message;
- (void)showErrorButton:(BOOL)animated;
- (void)hideErrorButton:(BOOL)animated;
- (void)configMenu:(NSString * __nullable)deleteTitle sendTitle:(NSString * __nullable)sendTitle deleteBlock:(void (^ __nonnull)(void))deleteBlock sendBlock:(void (^ __nonnull)(void))sendBlock;
- (void)configAsOutgoingMessage;
- (void)configAsIncomingMessage;
@end

#pragma clang diagnostic pop
